P16 assembler v1.3.2 (May  7 2020)	c:\Users\roby\Desktop\lab5\LeftRoulette.lst	Mon Dec 05 10:31:16 2022

Sections
Index   Name            Addresses       Size
0       .startup        0000 - 000D     000E 14
1       .text           000E - 0117     010A 266
2       .data           0118 - 0117     0000 0
3       .bss            0118 - 011D     0006 6
4       .stack          011E - 015D     0040 64

Symbols
Name                    Type      Value      Section
_start                  LABEL     0004 4     .startup
blink_time              LABEL     011D 285   .bss
blink_time_adress       LABEL     0056 86    .text
CPSR_BIT_I              ABSOLUTE  0010 16    .startup
delay                   LABEL     0058 88    .text
delay_loop              LABEL     0060 96    .text
I210_MASK               ABSOLUTE  0007 7     .startup
I7_MASK                 ABSOLUTE  0080 128   .startup
if_equal                LABEL     007E 126   .text
if_not_equal            LABEL     0082 130   .text
inport_addr             LABEL     00BC 188   .text
INPORT_ADDRESS          ABSOLUTE  FF00 65280 .startup
inport_read             LABEL     00B6 182   .text
isr                     LABEL     0094 148   .text
isr_addr                LABEL     000C 12    .startup
led_on_mask             LABEL     011C 284   .bss
led_on_mask_adress      LABEL     008A 138   .text
loop_multiply           LABEL     006E 110   .text
main                    LABEL     000E 14    .text
main_addr               LABEL     000A 10    .startup
main_loop               LABEL     0024 36    .text
multiply                LABEL     006A 106   .text
outport_addr            LABEL     00EE 238   .text
OUTPORT_ADDRESS         ABSOLUTE  FF00 65280 .startup
outport_clear_bits      LABEL     00CC 204   .text
outport_img             LABEL     0118 280   .bss
outport_img_addr        LABEL     00E6 230   .text
outport_init            LABEL     00DC 220   .text
OUTPORT_INIT_VAL        ABSOLUTE  0000 0     .startup
outport_set_bits        LABEL     00BE 190   .text
outport_write           LABEL     00E8 232   .text
PTC_ADDR                LABEL     0116 278   .text
PTC_ADDRESS             ABSOLUTE  FF40 65344 .startup
PTC_CMD_START           ABSOLUTE  0000 0     .startup
PTC_CMD_STOP            ABSOLUTE  0001 1     .startup
ptc_get_value           LABEL     0100 256   .text
ptc_init                LABEL     0106 262   .text
ptc_start               LABEL     00F0 240   .text
ptc_stop                LABEL     00F8 248   .text
PTC_TC                  ABSOLUTE  0004 4     .startup
PTC_TCR                 ABSOLUTE  0000 0     .startup
PTC_TIR                 ABSOLUTE  0006 6     .startup
PTC_TMR                 ABSOLUTE  0002 2     .startup
shift_mask              LABEL     0078 120   .text
shift_mask_end          LABEL     0084 132   .text
STACK_SIZE              ABSOLUTE  0040 64    .startup
START_VAL_LED_ON        ABSOLUTE  0001 1     .startup
sysclk                  LABEL     011A 282   .bss
sysclk_addr             LABEL     0092 146   .text
SYSCLK_FREQ             ABSOLUTE  0063 99    .startup
sysclk_get_ticks        LABEL     008C 140   .text
tos                     LABEL     015E 350   .stack
tos_addr                LABEL     0008 8     .startup

Code listing
   1           	; Ficheiro:  ap05.S
   2           	; Descricao: Programa de suporte a realizacao da 5a atividade laboratorial de
   3           	;            Arquitetura de Computadores.
   4           	; Autor:     Tiago M Dias (tiago.dias@isel.pt)
   5           	; Data:      23-05-2022
   6           	
   7           	; Definicao dos valores dos simbolos utilizados no programa
   8           	;
   9          		.equ	CPSR_BIT_I, 0b010000          ; Mascara para o bit I do registo CPSR
  10           	
  11          		.equ	STACK_SIZE, 64                ; Dimensao do stack - 64 B
  12           	
  13           		; Definicoes do porto de entrada
  14          		.equ	INPORT_ADDRESS, 0xFF00        ; Endereco do porto de entrada
  15           	
  16           		; Definicoes do porto de saida
  17          		.equ	OUTPORT_ADDRESS, 0xFF00       ; Endereco do porto de saida
  18           	
  19          		.equ	OUTPORT_INIT_VAL, 0           ; Valor inicial do porto de saida
  20           	
  21          		.equ    I7_MASK, 0x80                  ; Mascara do switch I7
  22          		.equ 	I210_MASK, 0x7
  23           	
  24          		.equ	START_VAL_LED_ON, 0x1
  25           	
  26           		; Definicoes do circuito pTC
  27          		.equ	PTC_ADDRESS,  0xFF40          ; Endereco do circuito pTC
  28           	
  29          		.equ	PTC_TCR, 0                    ; Deslocamento do registo TCR do pTC
  30          		.equ	PTC_TMR, 2                    ; Deslocamento do registo TMR do pTC
  31          		.equ	PTC_TC, 4                     ; Deslocamento do registo TC do pTC
  32          		.equ	PTC_TIR, 6                    ; Deslocamento do registo TIR do pTC
  33           	
  34          		.equ	PTC_CMD_START, 0              ; Comando para iniciar a contagem no pTC
  35          		.equ	PTC_CMD_STOP, 1               ; Comando para parar a contagem no pTC
  36           	
  37          		.equ	SYSCLK_FREQ, 0x63             ; Intervalo de contagem do circuito pTC
  38           	                                          ; que suporta a implementação do sysclk
  39           	
  40           		; Outras definicoes
  41           	
  42           	; Seccao:    .startup
  43           	; Descricao: Guarda o código de arranque do sistema
  44           	;
  45           		.section .startup
  46 0000 01 58		b	_start
  47 0002 4F 0C		ldr	pc, isr_addr
  48           	_start:
  49 0004 1D 0C		ldr	sp, tos_addr
  50 0006 1F 0C		ldr	pc, main_addr
  51           	
  52           	tos_addr:
  53 0008 5E 01		.word	tos
  54           	main_addr:
  55 000A 0E 00		.word	main
  56           	isr_addr:
  57 000C 94 00		.word	isr
  58           	
  59           	; Seccao:    .text
  60           	; Descricao: Guarda o código do programa
  61           	;
  62           		.text
  63           	
  64           	; Rotina:    main
  65           	; Descricao: *** Para completar ***
  66           	; Entradas:  -
  67           	; Saidas:    -
  68           	; Efeitos:   *** Para completar ***
  69           	main:
  70 000E 00 60		mov	r0, #OUTPORT_INIT_VAL
  71 0010 65 5C		bl	outport_init
  72 0012 30 66		mov	r0, #SYSCLK_FREQ
  73 0014 78 5C		bl	ptc_init
  74 0016 60 B0		mrs	r0, cpsr
  75 0018 01 61		mov	r1, #CPSR_BIT_I
  76 001A 80 C8		orr	r0, r0, r1
  77 001C 40 B0		msr	cpsr, r0
  78 001E 10 60		mov r0, #START_VAL_LED_ON
  79 0020 41 0F		ldr	r1, led_on_mask_adress
  80 0022 10 28		strb r0, [r1, #0]
  81           	main_loop:
  82 0024 48 5C	    bl inport_read
  83 0026 01 68	    mov r1, #I7_MASK
  84 0028 82 C0	    and r2, r0, r1
  85 002A 10 B9	    cmp r1, r2
  86           	
  87 002C FB 47	    bne main_loop
  88           	
  89           		; verificar velocidade com o I[3..0]
  90 002E 43 5C	    bl inport_read
  91 0030 71 60	    mov r1, #I210_MASK
  92 0032 80 C0		and r0, r0, r1
  93 0034 1A 5C		bl multiply ; r0 = speed 
  94 0036 F1 0C		ldr	r1, blink_time_adress
  95 0038 10 20		str r0, [r1, #0] ; guardar speed em blink time
  96           	
  97 003A 71 0E		ldr	r1, led_on_mask_adress
  98 003C 10 08		ldrb r0, [r1, #0]
  99 003E 3F 5C		bl	outport_set_bits
 100 0040 1B 5C		bl shift_mask
 101 0042 91 0C		ldr	r1, blink_time_adress
 102 0044 10 08		ldrb r0, [r1, #0]
 103 0046 08 5C		bl	delay
 104 0048 01 0E		ldr	r1, led_on_mask_adress
 105 004A 10 08		ldrb r0, [r1, #0]
 106 004C 3F 5C		bl	outport_clear_bits
 107 004E 31 0C		ldr	r1, blink_time_adress
 108 0050 10 08		ldrb r0, [r1, #0]
 109 0052 02 5C		bl	delay
 110 0054 E7 5B		b	main_loop
 111           	
 112           	blink_time_adress:
 113 0056 1D 01		.word	blink_time
 114           	
 115           	; Rotina:    delay
 116           	; Descricao: Rotina bloqueante que realiza uma espera ativa por teste sucessivo
 117           	;            do valor da variável global sysclk. O tempo a esperar, em
 118           	;            centenas de milissegundos, e passado em R0.
 119           	;            Interface exemplo: void delay( uint16_t hms );
 120           	; Entradas: 	R0 = hms
 121           	; Saidas:    -
 122           	; Efeitos:   -
 123           	delay:
 124 0058 0E 24		push lr	
 125 005A 02 B0		mov r2, r0 ; r2 = hms
 126 005C 17 5C		bl sysclk_get_ticks
 127 005E 03 B0		mov r3, r0 ; r3 = valor atual do sysclk
 128           	delay_loop:
 129 0060 15 5C		bl sysclk_get_ticks
 130 0062 80 89		sub r0, r0, r3
 131 0064 00 B9		cmp r0, r2
 132 0066 FC 47		bne delay_loop
 133 0068 0F 04		pop pc
 134           	
 135           	; Rotina:    multiply
 136           	; Descricao: Multiplica o valor de r0
 137           	; Entradas:  r0 = n
 138           	; Saidas:    r0 = n*5
 139           	; Efeitos:  (r0+1)*5
 140           	multiply:
 141 006A 01 60		mov r1, #0
 142 006C 80 A0		add r0, r0, #1
 143           	loop_multiply:
 144 006E 91 A2		add r1, r1, #5
 145 0070 80 A8		sub r0, r0, #1 
 146 0072 FD 47		bne	loop_multiply
 147 0074 80 B0	    mov r0, r1
 148 0076 0F B7		mov pc, lr
 149           	
 150           	; Rotina:    shift_mask
 151           	; Descricao: shifta a mascara
 152           	; Entradas:  r0 = n
 153           	; Saidas:    r0 = n << 1 ou 1
 154           	shift_mask:
 155 0078 03 68		mov r3, #I7_MASK
 156 007A 80 B9		cmp r0, r3
 157 007C 02 44		bne if_not_equal
 158           	if_equal:
 159 007E 10 60		mov r0, #START_VAL_LED_ON
 160 0080 01 58		b shift_mask_end
 161           	if_not_equal:
 162 0082 80 E0		lsl r0, r0, #1
 163           	shift_mask_end:
 164 0084 21 0C		ldr r1, led_on_mask_adress
 165 0086 10 28		strb r0, [r1, #0]
 166 0088 0F B7		mov pc, lr
 167           	
 168           	led_on_mask_adress:
 169 008A 1C 01		.word	led_on_mask
 170           	
 171           	; Rotina:    sysclk_get_ticks
 172           	; Descricao: Devolve o valor corrente da variável global sysclk.
 173           	;            Interface exemplo: uint16_t sysclk_get_ticks ( );
 174           	; Entradas:  -
 175           	; Saidas:    *** Para completar ***
 176           	; Efeitos:   -
 177           	sysclk_get_ticks:
 178 008C 21 0C		ldr r1, sysclk_addr
 179 008E 10 00		ldr r0, [r1, #0]
 180 0090 0F B7		mov pc, lr
 181           	
 182           	sysclk_addr:
 183 0092 1A 01		.word	sysclk
 184           	
 185           	; Rotina:    isr
 186           	; Descricao: Incrementa o valor da variável global sysclk.
 187           	; Entradas:  -
 188           	; Saidas:    -
 189           	; Efeitos:   *** Para completar ***
 190           	isr:
 191 0094 0E 24		push lr
 192 0096 00 24		push r0
 193 0098 01 24		push r1
 194 009A 02 24		push r2
 195 009C 03 24		push r3
 196 009E F6 5F		bl sysclk_get_ticks
 197 00A0 80 A0		add	r0, r0, #1
 198 00A2 10 20		str	r0, [r1, #0]
 199 00A4 10 60		mov r0, #1
 200 00A6 71 0F		ldr r1, PTC_ADDR
 201 00A8 10 2B		strb r0, [ r1, PTC_TIR ]
 202 00AA 03 04		pop r3
 203 00AC 02 04		pop r2
 204 00AE 01 04		pop r1
 205 00B0 00 04		pop r0
 206 00B2 0E 04		pop lr
 207 00B4 20 B0		movs pc, lr
 208           	
 209           	; Gestor de periférico para o porto de entrada
 210           	;
 211           	
 212           	; Rotina:    inport_read
 213           	; Descricao: Adquire e devolve o valor corrente do porto de entrada.
 214           	;            Interface exemplo: uint8_t inport_read( );
 215           	; Entradas:  -
 216           	; Saidas:    R0 - valor adquirido do porto de entrada
 217           	; Efeitos:   -
 218           	inport_read:
 219 00B6 21 0C		ldr	r1, inport_addr
 220 00B8 10 08		ldrb	r0, [r1, #0]
 221 00BA 0F B7		mov	pc, lr
 222           	
 223           	inport_addr:
 224 00BC 00 FF		.word	INPORT_ADDRESS
 225           	
 226           	; Gestor de periférico para o porto de saída
 227           	;
 228           	
 229           	; Rotina:    outport_set_bits
 230           	; Descricao: Atribui o valor logico 1 aos bits do porto de saida identificados
 231           	;            com o valor 1 em R0. O valor dos outros bits nao e alterado.
 232           	;            Interface exemplo: void outport_set_bits( uint8_t pins_mask );
 233           	; Entradas:  R0 - Mascara com a especificacao do indice dos bits a alterar.
 234           	; Saidas:    -
 235           	; Efeitos:   Altera o valor da variavel global outport_img.
 236           	outport_set_bits:
 237 00BE 0E 24		push	lr
 238 00C0 21 0D		ldr	r1, outport_img_addr
 239 00C2 12 08		ldrb	r2, [r1, #0]
 240 00C4 20 C8		orr	r0, r2, r0
 241 00C6 10 28		strb	r0, [r1, #0]
 242 00C8 0F 5C		bl	outport_write
 243 00CA 0F 04		pop	pc
 244           	
 245           	; Rotina:    outport_clear_bits
 246           	; Descricao: Atribui o valor logico 0 aos bits do porto de saida identificados
 247           	;            com o valor 1 em R0. O valor dos outros bits nao e alterado.
 248           	;            Interface exemplo: void outport_clear_bits( uint8_t pins_mask );
 249           	; Entradas:  R0 - Mascara com a especificacao do indice dos bits a alterar.
 250           	; Saidas:    -
 251           	; Efeitos:   Altera o valor da variavel global outport_img.
 252           	outport_clear_bits:
 253 00CC 0E 24		push	lr
 254 00CE B1 0C		ldr	r1, outport_img_addr
 255 00D0 12 08		ldrb	r2, [r1, #0]
 256 00D2 10 B0		mvn	r0, r0
 257 00D4 20 C0		and	r0, r2, r0
 258 00D6 10 28		strb	r0, [r1]
 259 00D8 07 5C		bl	outport_write
 260 00DA 0F 04		pop	pc
 261           	
 262           	; Rotina:    outport_init
 263           	; Descricao: Faz a iniciacao do porto de saida, nele estabelecendo o valor
 264           	;            recebido em R0.
 265           	;            Interface exemplo: void outport_init( uint8_t value );
 266           	; Entradas:  R0 - Valor a atribuir ao porto de saida.
 267           	; Saidas:    -
 268           	; Efeitos:   Altera o valor da variavel global outport_img.
 269           	outport_init:
 270 00DC 0E 24		push	lr
 271 00DE 31 0C		ldr	r1, outport_img_addr
 272 00E0 10 28		strb	r0, [r1]
 273 00E2 02 5C		bl	outport_write
 274 00E4 0F 04		pop	pc
 275           	
 276           	outport_img_addr:
 277 00E6 18 01		.word	outport_img
 278           	
 279           	; Rotina:    outport_write
 280           	; Descricao: Escreve no porto de saida o valor recebido em R0.
 281           	;            Interface exemplo: void outport_write( uint8_t value );
 282           	; Entradas:  R0 - valor a atribuir ao porto de saida.
 283           	; Saidas:    -
 284           	; Efeitos:   -
 285           	outport_write:
 286 00E8 21 0C		ldr	r1, outport_addr
 287 00EA 10 28		strb	r0, [r1, #0]
 288 00EC 0F B7		mov	pc, lr
 289           	
 290           	outport_addr:
 291 00EE 00 FF		.word	OUTPORT_ADDRESS
 292           	
 293           	; Gestor de periférico para o Pico Timer/Counter (pTC)
 294           	;
 295           	
 296           	; Rotina:    ptc_start
 297           	; Descricao: Habilita a contagem no periferico pTC.
 298           	;            Interface exemplo: void ptc_start( );
 299           	; Entradas:  -
 300           	; Saidas:    -
 301           	; Efeitos:   -
 302           	ptc_start:
 303 00F0 20 0D		ldr	r0, PTC_ADDR
 304 00F2 01 60		mov	r1, #PTC_CMD_START
 305 00F4 01 28		strb	r1, [r0, #PTC_TCR]
 306 00F6 0F B7		mov	pc, lr
 307           	
 308           	; Rotina:    ptc_stop
 309           	; Descricao: Para a contagem no periferico pTC.
 310           	;            Interface exemplo: void ptc_stop( );
 311           	; Entradas:  -
 312           	; Saidas:    -
 313           	; Efeitos:   O valor do registo TC do periferico e colocado a zero.
 314           	ptc_stop:
 315 00F8 E0 0C		ldr	r0, PTC_ADDR
 316 00FA 11 60		mov	r1, #PTC_CMD_STOP
 317 00FC 01 28		strb r1, [r0, #PTC_TCR]
 318 00FE 0F B7		mov	pc, lr
 319           	
 320           	; Rotina:    ptc_get_value
 321           	; Descricao: Devolve o valor corrente da contagem do periferico pTC.
 322           	;            Interface exemplo: uint8_t ptc_get_value( );
 323           	; Entradas:  -
 324           	; Saidas:    R0 - O valor corrente do registo TC do periferico.
 325           	; Efeitos:   -
 326           	ptc_get_value:
 327 0100 A1 0C		ldr	r1, PTC_ADDR
 328 0102 10 0A		ldrb	r0, [r1, #PTC_TC]
 329 0104 0F B7		mov	pc, lr
 330           	
 331           	; Rotina:    ptc_init
 332           	; Descricao: Inicia uma nova contagem no periferico pTC com o intervalo de
 333           	;            contagem recebido em R0, em ticks.
 334           	;            Interface exemplo: void ptc_init( uint8_t interval );
 335           	; Entradas:  R0 - Valor do novo intervalo de contagem, em ticks.
 336           	; Saidas:    -
 337           	; Efeitos:   Inicia a contagem no periferico a partir do valor zero, limpando
 338           	;            o pedido de interrupcao eventualmente pendente.
 339           	ptc_init:
 340 0106 0E 24		push lr
 341 0108 00 24		push r0
 342 010A F6 5F		bl ptc_stop
 343 010C 00 04		pop r0
 344 010E 31 0C		ldr r1, PTC_ADDR
 345 0110 10 29		strb r0, [ r1, PTC_TMR ]
 346 0112 EE 5F		bl ptc_start
 347 0114 0F 04		pop pc	 
 348           	
 349           	PTC_ADDR:
 350 0116 40 FF		.word	PTC_ADDRESS
 351           	
 352           	; Seccao:    .data
 353           	; Descricao: Guarda as variáveis globais com um valor inicial definido
 354           	;
 355           		.data
 356           	
 357           	; Seccao:    .bss
 358           	; Descricao: Guarda as variáveis globais sem valor inicial definido
 359           	;
 360           		.section .bss
 361           	outport_img:
 362 0118 00   		.space	1
 363 0119 00  		.align
 364           	
 365           	sysclk:
 366 011A 00   		.space	2
 366 011B 00
 367           	
 368           	led_on_mask:
 369 011C 00   		.space	1
 370           	
 371           	blink_time:
 372 011D 00   		.space	1
 373           	
 374           	
 375           	
 376           	; Seccao:    .stack
 377           	; Descricao: Implementa a pilha com o tamanho definido pelo simbolo STACK_SIZE
 378           	;
 379           		.section .stack
 380 011E 00   		.space	STACK_SIZE
 380 .... ..
 380 015D 00
 381           	tos:
